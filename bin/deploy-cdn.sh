#!/bin/bash

# Deploy to CDN Script
# This script builds the project and deploys it to a separate 'dist' branch for jsDelivr CDN access
# Usage: ./bin/deploy-cdn.sh [version]
# Example: ./bin/deploy-cdn.sh v1.0.1

set -e  # Exit on error

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Configuration
DIST_BRANCH="dist"
DIST_DIR="dist"
VERSION=${1:-"latest"}

echo -e "${BLUE}🚀 Starting CDN Deployment Process${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

# Step 1: Check if working directory is clean
echo -e "\n${YELLOW}📋 Step 1: Checking working directory...${NC}"
if [[ -n $(git status -s) ]]; then
    echo -e "${RED}❌ Error: Working directory is not clean. Please commit or stash your changes.${NC}"
    git status -s
    exit 1
fi
echo -e "${GREEN}✅ Working directory is clean${NC}"

# Step 2: Get current branch
CURRENT_BRANCH=$(git branch --show-current)
echo -e "\n${YELLOW}📋 Step 2: Current branch: ${CURRENT_BRANCH}${NC}"

# Step 3: Build the project
echo -e "\n${YELLOW}📋 Step 3: Building production bundle...${NC}"
pnpm build
if [ ! -f "$DIST_DIR/index.js" ]; then
    echo -e "${RED}❌ Error: Build failed - dist/index.js not found${NC}"
    exit 1
fi
echo -e "${GREEN}✅ Build completed successfully${NC}"

# Step 4: Save dist files before switching branches
echo -e "\n${YELLOW}📋 Step 4: Saving build files...${NC}"
TEMP_DIR=$(mktemp -d)
cp -r $DIST_DIR/* $TEMP_DIR/
echo -e "${GREEN}✅ Build files saved to temp directory${NC}"

# Step 5: Create or checkout dist branch
echo -e "\n${YELLOW}📋 Step 5: Preparing dist branch...${NC}"
if git show-ref --verify --quiet refs/heads/$DIST_BRANCH; then
    echo -e "${BLUE}Checking out existing local dist branch...${NC}"
    git checkout $DIST_BRANCH
    # Remove all files
    git rm -rf . 2>/dev/null || true
    rm -rf * .* 2>/dev/null || true
elif git ls-remote --exit-code --heads origin $DIST_BRANCH >/dev/null 2>&1; then
    echo -e "${BLUE}Fetching existing remote dist branch...${NC}"
    git fetch origin $DIST_BRANCH:$DIST_BRANCH
    git checkout $DIST_BRANCH
    # Remove all files
    git rm -rf . 2>/dev/null || true
    rm -rf * .* 2>/dev/null || true
else
    echo -e "${BLUE}Creating new orphan dist branch...${NC}"
    git checkout --orphan $DIST_BRANCH
    # Remove all files from staging and working directory
    git rm -rf . 2>/dev/null || true
    rm -rf * .* 2>/dev/null || true
fi
echo -e "${GREEN}✅ Dist branch ready${NC}"

# Step 6: Copy dist files from temp to root
echo -e "\n${YELLOW}📋 Step 6: Copying build files to dist branch...${NC}"
cp -r $TEMP_DIR/* .
rm -rf $TEMP_DIR

# Step 7: Create a minimal README for the dist branch
echo -e "\n${YELLOW}📋 Step 7: Creating README...${NC}"
cat > README.md << EOF
# Distribution Branch

This branch contains the compiled production build for CDN distribution via jsDelivr.

**⚠️ Do not edit this branch manually!**

This branch is automatically generated by the deployment script.

## Usage

Include in your HTML:

\`\`\`html
<script defer src="https://cdn.jsdelivr.net/gh/joaolucaswork/lp-reino-2025@dist/index.js"></script>
\`\`\`

Or use a specific version tag:

\`\`\`html
<script defer src="https://cdn.jsdelivr.net/gh/joaolucaswork/lp-reino-2025@${VERSION}/index.js"></script>
\`\`\`

## Build Information

- **Version:** ${VERSION}
- **Built from:** ${CURRENT_BRANCH}
- **Build date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
- **Commit:** $(git rev-parse --short $CURRENT_BRANCH)

---

Generated by: \`bin/deploy-cdn.sh\`
EOF

echo -e "${GREEN}✅ README created${NC}"

# Step 8: Commit changes
echo -e "\n${YELLOW}📋 Step 8: Committing changes...${NC}"
git add .
git commit -m "Deploy ${VERSION} - Built from ${CURRENT_BRANCH} @ $(git rev-parse --short $CURRENT_BRANCH)"
echo -e "${GREEN}✅ Changes committed${NC}"

# Step 9: Push to remote
echo -e "\n${YELLOW}📋 Step 9: Pushing to remote...${NC}"
git push origin $DIST_BRANCH --force
echo -e "${GREEN}✅ Pushed to remote${NC}"

# Step 10: Return to original branch
echo -e "\n${YELLOW}📋 Step 10: Returning to ${CURRENT_BRANCH}...${NC}"
git checkout $CURRENT_BRANCH
echo -e "${GREEN}✅ Returned to ${CURRENT_BRANCH}${NC}"

# Step 11: Create git tag if version specified
if [ "$VERSION" != "latest" ]; then
    echo -e "\n${YELLOW}📋 Step 11: Creating version tag...${NC}"
    if git rev-parse "$VERSION" >/dev/null 2>&1; then
        echo -e "${YELLOW}⚠️  Tag ${VERSION} already exists, skipping...${NC}"
    else
        git tag -a "$VERSION" -m "Release $VERSION"
        git push origin "$VERSION"
        echo -e "${GREEN}✅ Tag ${VERSION} created and pushed${NC}"
    fi
fi

# Success message
echo -e "\n${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}🎉 Deployment completed successfully!${NC}"
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "\n${BLUE}📦 Your jsDelivr URLs:${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "\n${YELLOW}Latest version (auto-updates):${NC}"
echo -e "https://cdn.jsdelivr.net/gh/joaolucaswork/lp-reino-2025@dist/index.js"
if [ "$VERSION" != "latest" ]; then
    echo -e "\n${YELLOW}Specific version (${VERSION}):${NC}"
    echo -e "https://cdn.jsdelivr.net/gh/joaolucaswork/lp-reino-2025@${VERSION}/index.js"
fi
echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "\n${GREEN}✨ Add this to your Webflow project:${NC}"
echo -e '<script defer src="https://cdn.jsdelivr.net/gh/joaolucaswork/lp-reino-2025@dist/index.js"></script>'
echo ""


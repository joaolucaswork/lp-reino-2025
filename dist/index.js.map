{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/card-info-mapper.ts", "../src/utils/card-updater.ts", "../node_modules/.pnpm/@finsweet+ts-utils@0.40.0/node_modules/@finsweet/ts-utils/dist/webflow/getPublishDate.js", "../src/utils/greet.ts", "../src/utils/card-rotation-manager.ts", "../src/utils/logo-card-toggle.ts", "../src/utils/profile-card-toggle.ts", "../src/utils/typebot-email-handler.ts", "../src/utils/typebot-name-replacer.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/**\n * Card Info Attribute Mapper\n *\n * Maps and manages all card-info attributes from the HTML structure.\n * Reference: webflow-source-files/index.html (lines 210-253)\n */\n\n/**\n * Card Info attribute types\n */\nexport enum CardInfoAttribute {\n  /** Main wrapper - controls background and text color */\n  BG_TEXT_COLOR = 'bg-text-color',\n  /** Name of the person/user */\n  NAME = 'name',\n  /** Title or role of the person */\n  TITLE = 'title',\n  /** Container for data elements (RC, mini block, date) */\n  ELEMENTS = 'elements',\n  /** Mini visual block indicator */\n  MINI = 'mini',\n  /** Registration/creation date */\n  DATE = 'date',\n  /** Central illustration element */\n  ILUSTRATION = 'ilustration',\n}\n\n/**\n * Card Info selector mapping\n */\nexport const CARD_INFO_SELECTORS = {\n  [CardInfoAttribute.BG_TEXT_COLOR]: '[card-info=\"bg-text-color\"]',\n  [CardInfoAttribute.NAME]: '[card-info=\"name\"]',\n  [CardInfoAttribute.TITLE]: '[card-info=\"title\"]',\n  [CardInfoAttribute.ELEMENTS]: '[card-info=\"elements\"]',\n  [CardInfoAttribute.MINI]: '[card-info=\"mini\"]',\n  [CardInfoAttribute.DATE]: '[card-info=\"date\"]',\n  [CardInfoAttribute.ILUSTRATION]: '[card-info=\"ilustration\"]',\n} as const;\n\n/**\n * Card Info element structure\n */\nexport interface CardInfoElements {\n  /** Main wrapper element (.profile-card_wrapper) */\n  wrapper: HTMLElement | null;\n  /** Name element (.name-people) */\n  name: HTMLElement | null;\n  /** Title element (.titulo-lead) */\n  title: HTMLElement | null;\n  /** Elements container (.info-data) */\n  elements: HTMLElement | null;\n  /** Mini block element (.visual-block-card) */\n  mini: HTMLElement | null;\n  /** Date element (.data-cadastro) */\n  date: HTMLElement | null;\n  /** Illustration element (.ilustration-center) */\n  ilustration: HTMLElement | null;\n}\n\n/**\n * Card data interface for updating card information\n */\nexport interface CardData {\n  /** User's name (default: \"******\") */\n  name?: string;\n  /** User's title/role (default: \"Investidor Explorador\") */\n  title?: string;\n  /** Registration date in DD.MM.YYYY format (default: \"07.10.2025\") */\n  date?: string;\n  /** Background and text color theme */\n  theme?: 'light' | 'dark' | string;\n}\n\n/**\n * Card Info Mapper Class\n */\nexport class CardInfoMapper {\n  private elements: CardInfoElements;\n\n  constructor() {\n    this.elements = this.queryAllElements();\n  }\n\n  /**\n   * Query all card-info elements from the DOM\n   * @returns CardInfoElements object with all queried elements\n   */\n  private queryAllElements(): CardInfoElements {\n    return {\n      wrapper: document.querySelector(CARD_INFO_SELECTORS[CardInfoAttribute.BG_TEXT_COLOR]),\n      name: document.querySelector(CARD_INFO_SELECTORS[CardInfoAttribute.NAME]),\n      title: document.querySelector(CARD_INFO_SELECTORS[CardInfoAttribute.TITLE]),\n      elements: document.querySelector(CARD_INFO_SELECTORS[CardInfoAttribute.ELEMENTS]),\n      mini: document.querySelector(CARD_INFO_SELECTORS[CardInfoAttribute.MINI]),\n      date: document.querySelector(CARD_INFO_SELECTORS[CardInfoAttribute.DATE]),\n      ilustration: document.querySelector(CARD_INFO_SELECTORS[CardInfoAttribute.ILUSTRATION]),\n    };\n  }\n\n  /**\n   * Get a specific card-info element\n   * @param attribute The card-info attribute to query\n   * @returns The HTML element or null if not found\n   */\n  public getElement(attribute: CardInfoAttribute): HTMLElement | null {\n    const elementMap: Record<CardInfoAttribute, keyof CardInfoElements> = {\n      [CardInfoAttribute.BG_TEXT_COLOR]: 'wrapper',\n      [CardInfoAttribute.NAME]: 'name',\n      [CardInfoAttribute.TITLE]: 'title',\n      [CardInfoAttribute.ELEMENTS]: 'elements',\n      [CardInfoAttribute.MINI]: 'mini',\n      [CardInfoAttribute.DATE]: 'date',\n      [CardInfoAttribute.ILUSTRATION]: 'ilustration',\n    };\n\n    const key = elementMap[attribute];\n    return this.elements[key] || null;\n  }\n\n  /**\n   * Get all card-info elements\n   * @returns CardInfoElements object\n   */\n  public getAllElements(): CardInfoElements {\n    return this.elements;\n  }\n\n  /**\n   * Refresh all element queries (useful after DOM updates)\n   */\n  public refresh(): void {\n    this.elements = this.queryAllElements();\n  }\n\n  /**\n   * Update card data\n   * @param data CardData object with values to update\n   */\n  public updateCard(data: CardData): void {\n    if (data.name && this.elements.name) {\n      this.elements.name.textContent = data.name;\n    }\n\n    if (data.title && this.elements.title) {\n      this.elements.title.textContent = data.title;\n    }\n\n    if (data.date && this.elements.date) {\n      this.elements.date.textContent = data.date;\n    }\n\n    if (data.theme && this.elements.wrapper) {\n      this.elements.wrapper.setAttribute('data-theme', data.theme);\n    }\n  }\n\n  /**\n   * Check if all required elements are present in the DOM\n   * @returns true if all elements exist, false otherwise\n   */\n  public validateElements(): boolean {\n    return Object.values(this.elements).every((element) => element !== null);\n  }\n\n  /**\n   * Get missing elements\n   * @returns Array of attribute names for missing elements\n   */\n  public getMissingElements(): CardInfoAttribute[] {\n    const missing: CardInfoAttribute[] = [];\n\n    Object.entries(this.elements).forEach(([key, element]) => {\n      if (element === null) {\n        missing.push(key as CardInfoAttribute);\n      }\n    });\n\n    return missing;\n  }\n}\n\n/**\n * Initialize and return a new CardInfoMapper instance\n * @returns CardInfoMapper instance\n */\nexport const initCardInfoMapper = (): CardInfoMapper => {\n  return new CardInfoMapper();\n};\n\n/**\n * Get an element by card-info attribute\n * @param attribute The card-info attribute value\n * @returns The HTML element or null\n */\nexport const getCardInfoElement = (attribute: CardInfoAttribute): HTMLElement | null => {\n  return document.querySelector(`[card-info=\"${attribute}\"]`);\n};\n\n/**\n * Get all elements with card-info attribute\n * @returns NodeList of all elements with card-info attribute\n */\nexport const getAllCardInfoElements = (): NodeListOf<HTMLElement> => {\n  return document.querySelectorAll('[card-info]');\n};\n", "import type { CardInfoMapper } from './card-info-mapper';\n\n/**\n * Format date to DD.MM.YYYY format\n * @param date The date to format\n * @returns Formatted date string\n */\nexport const formatDate = (date: Date): string => {\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n};\n\n/**\n * List of creative investor titles\n */\nexport const investorTitles = [\n  'Investidor Explorador',\n  'Investidor Estrat\u00E9gico',\n  'Investidor Vision\u00E1rio',\n  'Investidor Inovador',\n  'Investidor Consciente',\n  'Investidor Anal\u00EDtico',\n  'Investidor Empreendedor',\n  'Investidor Resiliente',\n] as const;\n\n/**\n * Rotate through investor titles\n * @param mapper The CardInfoMapper instance\n * @param intervalMs Interval in milliseconds between title changes\n * @returns Interval ID for cleanup\n */\nexport const startTitleRotation = (mapper: CardInfoMapper, intervalMs: number = 3000): number => {\n  let currentIndex = 0;\n\n  const rotateTitle = () => {\n    currentIndex = (currentIndex + 1) % investorTitles.length;\n    mapper.updateCard({ title: investorTitles[currentIndex] });\n  };\n\n  return window.setInterval(rotateTitle, intervalMs);\n};\n\n/**\n * Initialize card updates with current date and title rotation\n * @param mapper The CardInfoMapper instance\n * @param titleIntervalMs Interval in milliseconds for title rotation\n * @returns Interval ID for cleanup\n */\nexport const initCardUpdates = (mapper: CardInfoMapper, titleIntervalMs: number = 3000): number => {\n  // Update date with current system date\n  const currentDate = new Date();\n  const formattedDate = formatDate(currentDate);\n  mapper.updateCard({ date: formattedDate });\n\n  // Start title rotation\n  return startTitleRotation(mapper, titleIntervalMs);\n};\n", "/**\n * Extracts the publish date of a Webflow site\n * @returns A Date object, if found.\n * @param page The page to get the publish date from. Defaults to the current page.\n */\nexport const getPublishDate = (page = document) => {\n    const publishDatePrefix = 'Last Published:';\n    for (const node of page.childNodes) {\n        if (node.nodeType === Node.COMMENT_NODE && node.textContent?.includes(publishDatePrefix)) {\n            const publishDateValue = node.textContent.trim().split(publishDatePrefix)[1];\n            if (publishDateValue)\n                return new Date(publishDateValue);\n        }\n    }\n};\n", "import { getPublishDate } from '@finsweet/ts-utils';\n\n/**\n * Greets the user by printing a message in the console.\n * @param name The user's name.\n */\nexport const greetUser = (name: string) => {\n  const publishDate = getPublishDate();\n\n  console.log(`Hello ${name}!`);\n  console.log(\n    `This site was last published on ${publishDate?.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: '2-digit',\n    })}.`\n  );\n};\n", "/**\n * Card Rotation Manager\n *\n * Shared utility for managing card rotation animations.\n * Used by both email input handler and logo click handler.\n *\n * Rotation involves:\n * 1. Adding/removing 'rotate' class on profile card\n * 2. Toggling 'active' class between front and rotation elements\n * 3. Ensuring 'active_fill' class is present on profile card\n */\n\n/**\n * Configuration for card rotation\n */\nexport interface CardRotationConfig {\n  /** Selector for the profile card wrapper */\n  profileCardSelector?: string;\n  /** Selector for the front elements container */\n  frontElementsSelector?: string;\n  /** Selector for the rotation elements container */\n  rotationElementsSelector?: string;\n  /** Class to add to profile card for active state */\n  activeFillClass?: string;\n  /** Class to add to profile card to trigger rotation */\n  rotateClass?: string;\n  /** Class to toggle on front/rotation elements */\n  activeClass?: string;\n  /** Enable debug logging */\n  debug?: boolean;\n}\n\n/**\n * Default configuration\n */\nconst DEFAULT_CONFIG: Required<CardRotationConfig> = {\n  profileCardSelector: '.profile-card_wrapper',\n  frontElementsSelector: '.front-elements',\n  rotationElementsSelector: '.rotation-elements',\n  activeFillClass: 'active_fill',\n  rotateClass: 'rotate',\n  activeClass: 'active',\n  debug: false,\n};\n\n/**\n * Card rotation state\n */\nexport enum CardRotationState {\n  /** Card is showing front face */\n  FRONT = 'front',\n  /** Card is showing back face (rotated) */\n  BACK = 'back',\n}\n\n/**\n * CardRotationManager class\n * Manages card rotation animations and state\n */\nexport class CardRotationManager {\n  private config: Required<CardRotationConfig>;\n\n  constructor(config: CardRotationConfig = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n  }\n\n  /**\n   * Get the current rotation state of the card\n   * @returns CardRotationState.FRONT or CardRotationState.BACK\n   */\n  public getRotationState(): CardRotationState {\n    const profileCard = document.querySelector(this.config.profileCardSelector);\n\n    if (!profileCard) {\n      this.log('Profile card not found, assuming FRONT state');\n      return CardRotationState.FRONT;\n    }\n\n    const hasRotateClass = profileCard.classList.contains(this.config.rotateClass);\n    return hasRotateClass ? CardRotationState.BACK : CardRotationState.FRONT;\n  }\n\n  /**\n   * Check if the card is currently rotated (showing back face)\n   * @returns true if card is showing back face, false otherwise\n   */\n  public isRotated(): boolean {\n    return this.getRotationState() === CardRotationState.BACK;\n  }\n\n  /**\n   * Rotate the card to show the back face\n   * @returns true if rotation was successful, false otherwise\n   */\n  public rotateToBack(): boolean {\n    this.log('Rotating card to show back face');\n\n    // Find the profile card element\n    const profileCard = document.querySelector(this.config.profileCardSelector);\n\n    if (!profileCard) {\n      this.log('Profile card not found with selector:', this.config.profileCardSelector);\n      return false;\n    }\n\n    // Ensure active_fill class is present (card should be active before rotating)\n    if (!profileCard.classList.contains(this.config.activeFillClass)) {\n      profileCard.classList.add(this.config.activeFillClass);\n      this.log(`Added ${this.config.activeFillClass} class to profile card`);\n    }\n\n    // Add rotate class to profile card\n    profileCard.classList.add(this.config.rotateClass);\n    this.log(`Added ${this.config.rotateClass} class to profile card`);\n\n    // Find front and rotation elements\n    const frontElements = document.querySelector(this.config.frontElementsSelector);\n    const rotationElements = document.querySelector(this.config.rotationElementsSelector);\n\n    if (!frontElements) {\n      this.log('Front elements not found with selector:', this.config.frontElementsSelector);\n    } else {\n      // Remove active class from front elements\n      frontElements.classList.remove(this.config.activeClass);\n      this.log(`Removed ${this.config.activeClass} class from front elements`);\n    }\n\n    if (!rotationElements) {\n      this.log('Rotation elements not found with selector:', this.config.rotationElementsSelector);\n    } else {\n      // Add active class to rotation elements\n      rotationElements.classList.add(this.config.activeClass);\n      this.log(`Added ${this.config.activeClass} class to rotation elements`);\n    }\n\n    this.log('Card rotation to back completed');\n    return true;\n  }\n\n  /**\n   * Rotate the card to show the front face\n   * @returns true if rotation was successful, false otherwise\n   */\n  public rotateToFront(): boolean {\n    this.log('Rotating card to show front face');\n\n    // Find the profile card element\n    const profileCard = document.querySelector(this.config.profileCardSelector);\n\n    if (!profileCard) {\n      this.log('Profile card not found with selector:', this.config.profileCardSelector);\n      return false;\n    }\n\n    // Remove rotate class from profile card\n    profileCard.classList.remove(this.config.rotateClass);\n    this.log(`Removed ${this.config.rotateClass} class from profile card`);\n\n    // Find front and rotation elements\n    const frontElements = document.querySelector(this.config.frontElementsSelector);\n    const rotationElements = document.querySelector(this.config.rotationElementsSelector);\n\n    if (!frontElements) {\n      this.log('Front elements not found with selector:', this.config.frontElementsSelector);\n    } else {\n      // Add active class to front elements\n      frontElements.classList.add(this.config.activeClass);\n      this.log(`Added ${this.config.activeClass} class to front elements`);\n    }\n\n    if (!rotationElements) {\n      this.log('Rotation elements not found with selector:', this.config.rotationElementsSelector);\n    } else {\n      // Remove active class from rotation elements\n      rotationElements.classList.remove(this.config.activeClass);\n      this.log(`Removed ${this.config.activeClass} class from rotation elements`);\n    }\n\n    this.log('Card rotation to front completed');\n    return true;\n  }\n\n  /**\n   * Toggle the card rotation (front <-> back)\n   * @returns The new rotation state after toggling\n   */\n  public toggleRotation(): CardRotationState {\n    const currentState = this.getRotationState();\n\n    if (currentState === CardRotationState.FRONT) {\n      this.rotateToBack();\n      return CardRotationState.BACK;\n    } else {\n      this.rotateToFront();\n      return CardRotationState.FRONT;\n    }\n  }\n\n  /**\n   * Log messages if debug mode is enabled\n   */\n  private log(...args: unknown[]): void {\n    if (this.config.debug) {\n      console.log('[CardRotationManager]', ...args);\n    }\n  }\n}\n\n/**\n * Create a new CardRotationManager instance\n * @param config Optional configuration\n * @returns CardRotationManager instance\n */\nexport function createCardRotationManager(config: CardRotationConfig = {}): CardRotationManager {\n  return new CardRotationManager(config);\n}\n\n/**\n * Rotate the card to show the back face (convenience function)\n * @param config Optional configuration\n * @returns true if rotation was successful\n */\nexport function rotateCardToBack(config: CardRotationConfig = {}): boolean {\n  const manager = new CardRotationManager(config);\n  return manager.rotateToBack();\n}\n\n/**\n * Rotate the card to show the front face (convenience function)\n * @param config Optional configuration\n * @returns true if rotation was successful\n */\nexport function rotateCardToFront(config: CardRotationConfig = {}): boolean {\n  const manager = new CardRotationManager(config);\n  return manager.rotateToFront();\n}\n\n/**\n * Toggle the card rotation (convenience function)\n * @param config Optional configuration\n * @returns The new rotation state\n */\nexport function toggleCardRotation(config: CardRotationConfig = {}): CardRotationState {\n  const manager = new CardRotationManager(config);\n  return manager.toggleRotation();\n}\n\n/**\n * Check if the card is currently rotated (convenience function)\n * @param config Optional configuration\n * @returns true if card is showing back face\n */\nexport function isCardRotated(config: CardRotationConfig = {}): boolean {\n  const manager = new CardRotationManager(config);\n  return manager.isRotated();\n}\n\n", "/**\n * Logo Card Toggle Handler\n *\n * Handles click interactions on the Reino Capital logo to toggle card rotation.\n * The logo appears on both the front and back faces of the card.\n *\n * Features:\n * - Click logo to rotate card (front -> back)\n * - Click logo again to reverse rotation (back -> front)\n * - Prevents event propagation to avoid triggering card click handler\n * - Uses shared CardRotationManager for consistent rotation behavior\n */\n\nimport { CardRotationManager, CardRotationState } from './card-rotation-manager';\n\n/**\n * Configuration for logo toggle handler\n */\ninterface LogoToggleConfig {\n  /** Selector for logo elements (both front and back) */\n  logoSelector?: string;\n  /** Enable debug logging */\n  debug?: boolean;\n}\n\n/**\n * Default configuration\n */\nconst DEFAULT_CONFIG: Required<LogoToggleConfig> = {\n  logoSelector: '.logo_card',\n  debug: false,\n};\n\n/**\n * LogoCardToggle class\n * Manages click interactions on logo elements to toggle card rotation\n */\nexport class LogoCardToggle {\n  private config: Required<LogoToggleConfig>;\n  private rotationManager: CardRotationManager;\n  private isInitialized = false;\n  private boundHandleClick: (event: Event) => void;\n\n  constructor(config: LogoToggleConfig = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.rotationManager = new CardRotationManager({ debug: this.config.debug });\n    this.boundHandleClick = this.handleLogoClick.bind(this);\n  }\n\n  /**\n   * Initialize the logo toggle handler\n   * Attaches click event listeners to all logo elements\n   */\n  public init(): void {\n    if (this.isInitialized) {\n      this.log('Logo toggle handler already initialized');\n      return;\n    }\n\n    this.attachEventListeners();\n    this.isInitialized = true;\n    this.log('Logo toggle handler initialized');\n  }\n\n  /**\n   * Attach click event listeners to all logo elements\n   */\n  private attachEventListeners(): void {\n    const logoElements = document.querySelectorAll<HTMLElement>(this.config.logoSelector);\n\n    if (logoElements.length === 0) {\n      this.log('No logo elements found with selector:', this.config.logoSelector);\n      return;\n    }\n\n    this.log(`Found ${logoElements.length} logo element(s) to attach listeners`);\n\n    logoElements.forEach((logo, index) => {\n      logo.addEventListener('click', this.boundHandleClick);\n      // Add cursor pointer to indicate clickability\n      logo.style.cursor = 'pointer';\n      this.log(`Attached click listener to logo element ${index + 1}`);\n    });\n  }\n\n  /**\n   * Handle click event on logo element\n   * @param event The click event\n   */\n  private handleLogoClick(event: Event): void {\n    // Stop event propagation to prevent triggering card click handler\n    event.stopPropagation();\n    event.preventDefault();\n\n    this.log('Logo clicked, toggling card rotation');\n\n    // Toggle the card rotation\n    const newState = this.rotationManager.toggleRotation();\n\n    this.log(`Card rotation toggled to: ${newState}`);\n\n    // Dispatch custom event for other components to listen to\n    this.dispatchRotationEvent(newState);\n  }\n\n  /**\n   * Dispatch a custom event when rotation state changes\n   * @param newState The new rotation state\n   */\n  private dispatchRotationEvent(newState: CardRotationState): void {\n    const event = new CustomEvent('card-rotation-toggle', {\n      detail: {\n        state: newState,\n        isRotated: newState === CardRotationState.BACK,\n      },\n      bubbles: true,\n    });\n\n    document.dispatchEvent(event);\n    this.log('Dispatched card-rotation-toggle event:', newState);\n  }\n\n  /**\n   * Get the current rotation state\n   * @returns The current rotation state\n   */\n  public getRotationState(): CardRotationState {\n    return this.rotationManager.getRotationState();\n  }\n\n  /**\n   * Check if the card is currently rotated\n   * @returns true if card is showing back face\n   */\n  public isRotated(): boolean {\n    return this.rotationManager.isRotated();\n  }\n\n  /**\n   * Manually rotate the card to show the back face\n   * @returns true if rotation was successful\n   */\n  public rotateToBack(): boolean {\n    const success = this.rotationManager.rotateToBack();\n    if (success) {\n      this.dispatchRotationEvent(CardRotationState.BACK);\n    }\n    return success;\n  }\n\n  /**\n   * Manually rotate the card to show the front face\n   * @returns true if rotation was successful\n   */\n  public rotateToFront(): boolean {\n    const success = this.rotationManager.rotateToFront();\n    if (success) {\n      this.dispatchRotationEvent(CardRotationState.FRONT);\n    }\n    return success;\n  }\n\n  /**\n   * Manually toggle the card rotation\n   * @returns The new rotation state\n   */\n  public toggle(): CardRotationState {\n    const newState = this.rotationManager.toggleRotation();\n    this.dispatchRotationEvent(newState);\n    return newState;\n  }\n\n  /**\n   * Remove event listeners and clean up\n   */\n  public destroy(): void {\n    const logoElements = document.querySelectorAll<HTMLElement>(this.config.logoSelector);\n\n    logoElements.forEach((logo, index) => {\n      logo.removeEventListener('click', this.boundHandleClick);\n      logo.style.cursor = '';\n      this.log(`Removed click listener from logo element ${index + 1}`);\n    });\n\n    this.isInitialized = false;\n    this.log('Logo toggle handler destroyed');\n  }\n\n  /**\n   * Log messages if debug mode is enabled\n   */\n  private log(...args: unknown[]): void {\n    if (this.config.debug) {\n      console.log('[LogoCardToggle]', ...args);\n    }\n  }\n}\n\n/**\n * Initialize the logo card toggle handler with default configuration\n * @param config Optional configuration\n * @returns LogoCardToggle instance\n */\nexport function initLogoCardToggle(config: LogoToggleConfig = {}): LogoCardToggle {\n  const toggle = new LogoCardToggle({\n    ...config,\n    debug: config.debug ?? true, // Enable debug logging by default\n  });\n\n  toggle.init();\n\n  return toggle;\n}\n\n/**\n * Listen for card rotation toggle events\n * @param callback Function to call when rotation state changes\n * @returns Function to remove the event listener\n */\nexport function onCardRotationToggle(\n  callback: (state: CardRotationState, isRotated: boolean) => void\n): () => void {\n  const handler = (event: Event) => {\n    const customEvent = event as CustomEvent<{ state: CardRotationState; isRotated: boolean }>;\n    callback(customEvent.detail.state, customEvent.detail.isRotated);\n  };\n\n  document.addEventListener('card-rotation-toggle', handler);\n\n  // Return cleanup function\n  return () => {\n    document.removeEventListener('card-rotation-toggle', handler);\n  };\n}\n\n", "/**\n * Profile Card Toggle Interaction\n *\n * Handles click interactions for profile card elements to toggle active state.\n * Reference: webflow-source-files/index.html (line 210)\n */\n\n/**\n * Configuration for additional elements to toggle\n */\ninterface AdditionalToggleElement {\n  /** CSS selector for the element (relative to profile card) */\n  selector: string;\n  /** Class name to toggle */\n  activeClass: string;\n}\n\n/**\n * Profile card wrapper selector\n */\nconst PROFILE_CARD_SELECTOR = '.profile-card_wrapper';\n\n/**\n * Active state class name for profile card\n */\nconst ACTIVE_CLASS = 'active_fill';\n\n/**\n * Additional elements to toggle when profile card is activated\n */\nconst ADDITIONAL_TOGGLE_ELEMENTS: AdditionalToggleElement[] = [\n  { selector: '.visual-block-card', activeClass: 'active' },\n  { selector: '.shadow-yellow', activeClass: 'active' },\n];\n\n/**\n * Extended HTMLElement interface with toggle state\n */\ninterface ProfileCardElement extends HTMLElement {\n  /** Toggle state counter (0 or 1) */\n  toggleState?: number;\n}\n\n/**\n * Toggle active state for all profile card elements\n * @param isActive Whether to add or remove the active class\n */\nconst toggleAllCards = (isActive: boolean): void => {\n  const cards = document.querySelectorAll<HTMLElement>(PROFILE_CARD_SELECTOR);\n  cards.forEach((card) => {\n    // Toggle active class on the profile card itself\n    if (isActive) {\n      card.classList.add(ACTIVE_CLASS);\n    } else {\n      card.classList.remove(ACTIVE_CLASS);\n    }\n\n    // Toggle active class on additional elements\n    ADDITIONAL_TOGGLE_ELEMENTS.forEach(({ selector, activeClass }) => {\n      const element = card.querySelector<HTMLElement>(selector);\n      if (element) {\n        if (isActive) {\n          element.classList.add(activeClass);\n        } else {\n          element.classList.remove(activeClass);\n        }\n      }\n    });\n  });\n};\n\n/**\n * Handle click event on profile card\n * @param event The click event\n */\nconst handleCardClick = (event: Event): void => {\n  const target = event.currentTarget as ProfileCardElement;\n\n  // Toggle state: 0 -> 1 -> 0 -> 1...\n  target.toggleState = ((target.toggleState || 0) + 1) % 2;\n\n  // Apply or remove active class based on toggle state\n  toggleAllCards(target.toggleState === 1);\n};\n\n/**\n * Initialize profile card toggle interactions\n * Attaches click event listeners to all profile card elements\n */\nexport const initProfileCardToggle = (): void => {\n  const cards = document.querySelectorAll<ProfileCardElement>(PROFILE_CARD_SELECTOR);\n\n  cards.forEach((card) => {\n    // Initialize toggle state\n    card.toggleState = 0;\n\n    // Attach click event listener\n    card.addEventListener('click', handleCardClick);\n  });\n};\n\n/**\n * Remove profile card toggle interactions\n * Removes click event listeners from all profile card elements\n */\nexport const destroyProfileCardToggle = (): void => {\n  const cards = document.querySelectorAll<ProfileCardElement>(PROFILE_CARD_SELECTOR);\n\n  cards.forEach((card) => {\n    card.removeEventListener('click', handleCardClick);\n    delete card.toggleState;\n  });\n};\n\n/**\n * Get current active state of profile cards\n * @returns true if cards are active, false otherwise\n */\nexport const isProfileCardActive = (): boolean => {\n  const card = document.querySelector<HTMLElement>(PROFILE_CARD_SELECTOR);\n  return card?.classList.contains(ACTIVE_CLASS) || false;\n};\n\n/**\n * Manually set active state for all profile cards\n * @param isActive Whether to activate or deactivate cards\n */\nexport const setProfileCardActive = (isActive: boolean): void => {\n  toggleAllCards(isActive);\n\n  // Update toggle state for all cards\n  const cards = document.querySelectorAll<ProfileCardElement>(PROFILE_CARD_SELECTOR);\n  cards.forEach((card) => {\n    card.toggleState = isActive ? 1 : 0;\n  });\n};\n", "/**\n * Typebot Email Handler Utility\n *\n * This utility listens for Typebot email variable changes and triggers\n * the profile card rotation animation when the email is completed.\n *\n * Features:\n * - Listens for Typebot postMessage events for email variable\n * - Captures the \"email\" and \"telefone\" variables from Typebot\n * - Triggers card rotation animation when email is completed\n * - Updates email and phone elements in real-time\n * - Manages the active state transitions between front and rotation elements\n */\n\ninterface TypebotVariableUpdate {\n  type: string;\n  variable?: string;\n  value?: string;\n  variableId?: string;\n}\n\n/**\n * Configuration for the email handler\n */\ninterface EmailHandlerConfig {\n  /** Selector for the profile card wrapper element */\n  profileCardSelector?: string;\n  /** Selector for the front elements container */\n  frontElementsSelector?: string;\n  /** Selector for the rotation elements container */\n  rotationElementsSelector?: string;\n  /** Selector for the email display element */\n  emailSelector?: string;\n  /** Selector for the phone display element */\n  phoneSelector?: string;\n  /** Class to add to profile card when email is filled */\n  activeFillClass?: string;\n  /** Class to add to profile card to trigger rotation */\n  rotateClass?: string;\n  /** Class to toggle on front/rotation elements */\n  activeClass?: string;\n  /** Enable debug logging */\n  debug?: boolean;\n}\n\n/**\n * Default configuration\n */\nconst DEFAULT_CONFIG: Required<EmailHandlerConfig> = {\n  profileCardSelector: '.profile-card_wrapper',\n  frontElementsSelector: '.front-elements',\n  rotationElementsSelector: '.rotation-elements',\n  emailSelector: '[card-info=\"email\"]',\n  phoneSelector: '[card-info=\"telefone\"]',\n  activeFillClass: 'active_fill',\n  rotateClass: 'rotate',\n  activeClass: 'active',\n  debug: false,\n};\n\n/**\n * TypebotEmailHandler class\n * Handles listening for Typebot email events and triggering card rotation\n */\nexport class TypebotEmailHandler {\n  private config: Required<EmailHandlerConfig>;\n  private userEmail: string | null = null;\n  private userPhone: string | null = null;\n  private isListening = false;\n  private hasRotated = false;\n\n  constructor(config: EmailHandlerConfig = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n  }\n\n  /**\n   * Initialize the email handler and start listening for Typebot events\n   */\n  public init(): void {\n    if (this.isListening) {\n      this.log('Already listening for Typebot events');\n      return;\n    }\n\n    this.setupMessageListener();\n    this.isListening = true;\n    this.log('TypebotEmailHandler initialized and listening for events');\n  }\n\n  /**\n   * Set up the message listener for Typebot events\n   */\n  private setupMessageListener(): void {\n    window.addEventListener('message', this.handleMessage.bind(this));\n  }\n\n  /**\n   * Handle incoming postMessage events from Typebot\n   */\n  private handleMessage(event: MessageEvent): void {\n    try {\n      const { data } = event;\n\n      // Check for Typebot variable update event\n      if (this.isTypebotVariableUpdate(data)) {\n        this.handleTypebotVariableUpdate(data as TypebotVariableUpdate);\n      }\n    } catch (error) {\n      console.error('Error handling Typebot message:', error);\n    }\n  }\n\n  /**\n   * Check if the message is a Typebot variable update event\n   */\n  private isTypebotVariableUpdate(data: unknown): boolean {\n    return (\n      typeof data === 'object' &&\n      data !== null &&\n      'type' in data &&\n      (data as TypebotVariableUpdate).type === 'typebot-variable-update' &&\n      'variable' in data\n    );\n  }\n\n  /**\n   * Handle Typebot variable update event\n   */\n  private handleTypebotVariableUpdate(message: TypebotVariableUpdate): void {\n    const { variable, value } = message;\n\n    if (!variable || !value) {\n      return;\n    }\n\n    this.log(`Typebot variable \"${variable}\" updated:`, value);\n\n    // Handle email variable\n    if (variable === 'email') {\n      this.updateUserEmail(value);\n      this.triggerCardRotation();\n    }\n\n    // Handle phone variable\n    if (variable === 'telefone' || variable === 'phone') {\n      this.updateUserPhone(value);\n    }\n  }\n\n  /**\n   * Update the stored user email and display it on the page\n   */\n  private updateUserEmail(email: string): void {\n    // Sanitize the email\n    const sanitizedEmail = this.sanitizeInput(email);\n\n    if (!sanitizedEmail) {\n      this.log('Invalid or empty email, skipping update');\n      return;\n    }\n\n    this.userEmail = sanitizedEmail;\n    this.log('User email updated to:', this.userEmail);\n\n    // Update email display on the page\n    this.updateEmailDisplay();\n  }\n\n  /**\n   * Update the stored user phone and display it on the page\n   */\n  private updateUserPhone(phone: string): void {\n    // Sanitize the phone\n    const sanitizedPhone = this.sanitizeInput(phone);\n\n    if (!sanitizedPhone) {\n      this.log('Invalid or empty phone, skipping update');\n      return;\n    }\n\n    this.userPhone = sanitizedPhone;\n    this.log('User phone updated to:', this.userPhone);\n\n    // Update phone display on the page\n    this.updatePhoneDisplay();\n  }\n\n  /**\n   * Sanitize user input (remove HTML tags, trim, limit length)\n   */\n  private sanitizeInput(input: string): string {\n    return input\n      .replace(/[<>]/g, '') // Remove HTML tags\n      .trim()\n      .substring(0, 200); // Limit to 200 characters\n  }\n\n  /**\n   * Update the email display element on the page\n   */\n  private updateEmailDisplay(): void {\n    if (!this.userEmail) {\n      this.log('No user email available, skipping display update');\n      return;\n    }\n\n    const emailElements = document.querySelectorAll(this.config.emailSelector);\n\n    if (emailElements.length === 0) {\n      this.log('No email elements found with selector:', this.config.emailSelector);\n      return;\n    }\n\n    this.log(`Found ${emailElements.length} email element(s) to update`);\n\n    emailElements.forEach((element) => {\n      element.textContent = this.userEmail!;\n      this.log(`Updated email element to: \"${this.userEmail}\"`);\n    });\n  }\n\n  /**\n   * Update the phone display element on the page\n   */\n  private updatePhoneDisplay(): void {\n    if (!this.userPhone) {\n      this.log('No user phone available, skipping display update');\n      return;\n    }\n\n    const phoneElements = document.querySelectorAll(this.config.phoneSelector);\n\n    if (phoneElements.length === 0) {\n      this.log('No phone elements found with selector:', this.config.phoneSelector);\n      return;\n    }\n\n    this.log(`Found ${phoneElements.length} phone element(s) to update`);\n\n    phoneElements.forEach((element) => {\n      element.textContent = this.userPhone!;\n      this.log(`Updated phone element to: \"${this.userPhone}\"`);\n    });\n  }\n\n  /**\n   * Trigger the card rotation animation\n   * This adds the rotate class and toggles active states\n   */\n  private triggerCardRotation(): void {\n    // Only rotate once\n    if (this.hasRotated) {\n      this.log('Card has already been rotated, skipping');\n      return;\n    }\n\n    this.log('Triggering card rotation animation');\n\n    // Find the profile card element\n    const profileCard = document.querySelector(this.config.profileCardSelector);\n\n    if (!profileCard) {\n      this.log('Profile card not found with selector:', this.config.profileCardSelector);\n      return;\n    }\n\n    // Add active_fill and rotate classes to profile card\n    profileCard.classList.add(this.config.activeFillClass);\n    profileCard.classList.add(this.config.rotateClass);\n    this.log(`Added classes to profile card: ${this.config.activeFillClass}, ${this.config.rotateClass}`);\n\n    // Find front and rotation elements\n    const frontElements = document.querySelector(this.config.frontElementsSelector);\n    const rotationElements = document.querySelector(this.config.rotationElementsSelector);\n\n    if (!frontElements) {\n      this.log('Front elements not found with selector:', this.config.frontElementsSelector);\n    } else {\n      // Remove active class from front elements\n      frontElements.classList.remove(this.config.activeClass);\n      this.log(`Removed ${this.config.activeClass} class from front elements`);\n    }\n\n    if (!rotationElements) {\n      this.log('Rotation elements not found with selector:', this.config.rotationElementsSelector);\n    } else {\n      // Add active class to rotation elements\n      rotationElements.classList.add(this.config.activeClass);\n      this.log(`Added ${this.config.activeClass} class to rotation elements`);\n    }\n\n    // Mark as rotated\n    this.hasRotated = true;\n    this.log('Card rotation completed');\n  }\n\n  /**\n   * Manually trigger the card rotation (useful for testing)\n   */\n  public rotate(): void {\n    this.hasRotated = false; // Reset the flag\n    this.triggerCardRotation();\n  }\n\n  /**\n   * Get the current user email\n   */\n  public getUserEmail(): string | null {\n    return this.userEmail;\n  }\n\n  /**\n   * Get the current user phone\n   */\n  public getUserPhone(): string | null {\n    return this.userPhone;\n  }\n\n  /**\n   * Reset the handler state\n   */\n  public reset(): void {\n    this.userEmail = null;\n    this.userPhone = null;\n    this.hasRotated = false;\n    this.log('Email handler reset');\n  }\n\n  /**\n   * Log messages if debug mode is enabled\n   */\n  private log(...args: unknown[]): void {\n    if (this.config.debug) {\n      console.log('[TypebotEmailHandler]', ...args);\n    }\n  }\n\n  /**\n   * Destroy the email handler and remove event listeners\n   */\n  public destroy(): void {\n    window.removeEventListener('message', this.handleMessage.bind(this));\n    this.isListening = false;\n    this.log('TypebotEmailHandler destroyed');\n  }\n}\n\n/**\n * Initialize the Typebot email handler with default configuration\n */\nexport function initTypebotEmailHandler(config: EmailHandlerConfig = {}): TypebotEmailHandler {\n  const handler = new TypebotEmailHandler({\n    ...config,\n    debug: true, // Enable debug logging by default\n  });\n\n  handler.init();\n\n  return handler;\n}\n\n", "/**\n * Typebot Name Replacer Utility\n *\n * This utility listens for Typebot variable changes and dynamically replaces\n * asterisks (***) on the page with the user's entered name.\n *\n * Features:\n * - Listens for Typebot postMessage events\n * - Captures the \"nome\" variable from Typebot\n * - Replaces all asterisks with the user's name\n * - Updates profile card elements in real-time\n * - Handles multiple asterisk patterns (*, **, ***, etc.)\n */\n\ninterface TypebotMessage {\n  type: string;\n  data?: {\n    nome?: string;\n    userId?: string;\n    [key: string]: unknown;\n  };\n}\n\ninterface TypebotVariableUpdate {\n  type: string;\n  variable?: string;\n  value?: string;\n  variableId?: string;\n}\n\n/**\n * Configuration for the name replacer\n */\ninterface NameReplacerConfig {\n  /** Selector for elements containing asterisks to replace with name */\n  targetSelector?: string;\n  /** Selector for elements containing asterisks to replace with user ID */\n  userIdSelector?: string;\n  /** Selector for the profile card wrapper element */\n  profileCardSelector?: string;\n  /** Class to add to profile card when name is filled */\n  activeClass?: string;\n  /** Attribute to identify card info elements */\n  cardInfoAttribute?: string;\n  /** Value of the card info attribute for name elements */\n  nameAttributeValue?: string;\n  /** Value of the card info attribute for user ID elements */\n  userIdAttributeValue?: string;\n  /** Pattern to match asterisks (default: /\\*+/g) */\n  asteriskPattern?: RegExp;\n  /** Additional elements to activate (relative to profile card) */\n  additionalActiveElements?: string[];\n  /** Enable debug logging */\n  debug?: boolean;\n}\n\n/**\n * Default configuration\n */\nconst DEFAULT_CONFIG: Required<NameReplacerConfig> = {\n  targetSelector: '[card-info=\"name\"]',\n  userIdSelector: '[card-info=\"random-code\"]',\n  profileCardSelector: '.profile-card_wrapper',\n  activeClass: 'active_fill',\n  cardInfoAttribute: 'card-info',\n  nameAttributeValue: 'name',\n  userIdAttributeValue: 'random-code',\n  asteriskPattern: /\\*+/g,\n  additionalActiveElements: ['.shadow-yellow', '.visual-block-card'],\n  debug: false,\n};\n\n/**\n * TypebotNameReplacer class\n * Handles listening for Typebot events and replacing asterisks with user names\n */\nexport class TypebotNameReplacer {\n  private config: Required<NameReplacerConfig>;\n  private userName: string | null = null;\n  private userId: string | null = null;\n  private isListening = false;\n\n  constructor(config: NameReplacerConfig = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n  }\n\n  /**\n   * Initialize the name replacer and start listening for Typebot events\n   */\n  public init(): void {\n    if (this.isListening) {\n      this.log('Already listening for Typebot events');\n      return;\n    }\n\n    this.setupMessageListener();\n    this.isListening = true;\n    this.log('TypebotNameReplacer initialized and listening for events');\n  }\n\n  /**\n   * Set up the message listener for Typebot events\n   */\n  private setupMessageListener(): void {\n    window.addEventListener('message', this.handleMessage.bind(this));\n  }\n\n  /**\n   * Handle incoming postMessage events from Typebot\n   */\n  private handleMessage(event: MessageEvent): void {\n    try {\n      const { data } = event;\n\n      // Check for Typebot completion event\n      if (this.isTypebotCompletion(data)) {\n        this.handleTypebotCompletion(data as TypebotMessage);\n      }\n\n      // Check for Typebot variable update event\n      if (this.isTypebotVariableUpdate(data)) {\n        this.handleTypebotVariableUpdate(data as TypebotVariableUpdate);\n      }\n    } catch (error) {\n      console.error('Error handling Typebot message:', error);\n    }\n  }\n\n  /**\n   * Check if the message is a Typebot completion event\n   */\n  private isTypebotCompletion(data: unknown): boolean {\n    return (\n      typeof data === 'object' &&\n      data !== null &&\n      'type' in data &&\n      (data as TypebotMessage).type === 'typebot-completion'\n    );\n  }\n\n  /**\n   * Check if the message is a Typebot variable update event\n   */\n  private isTypebotVariableUpdate(data: unknown): boolean {\n    return (\n      typeof data === 'object' &&\n      data !== null &&\n      'type' in data &&\n      (data as TypebotVariableUpdate).type === 'typebot-variable-update' &&\n      'variable' in data &&\n      (data as TypebotVariableUpdate).variable === 'nome'\n    );\n  }\n\n  /**\n   * Handle Typebot completion event\n   */\n  private handleTypebotCompletion(message: TypebotMessage): void {\n    if (message.data && message.data.nome) {\n      const { nome } = message.data;\n      this.log('Typebot completed with nome:', nome);\n      this.updateUserName(nome);\n    }\n\n    // Also capture user ID if provided\n    if (message.data && message.data.userId) {\n      const { userId } = message.data;\n      this.log('Typebot completed with userId:', userId);\n      this.updateUserId(userId);\n    }\n  }\n\n  /**\n   * Handle Typebot variable update event\n   */\n  private handleTypebotVariableUpdate(message: TypebotVariableUpdate): void {\n    if (message.value) {\n      this.log('Typebot variable \"nome\" updated:', message.value);\n      this.updateUserName(message.value);\n    }\n\n    // Also capture the variable ID if provided\n    if (message.variableId) {\n      this.log('Typebot variable ID captured:', message.variableId);\n      this.updateUserId(message.variableId);\n    }\n  }\n\n  /**\n   * Update the stored user name and replace asterisks on the page\n   */\n  private updateUserName(name: string): void {\n    // Sanitize the name\n    const sanitizedName = this.sanitizeName(name);\n\n    if (!sanitizedName) {\n      this.log('Invalid or empty name, skipping update');\n      return;\n    }\n\n    this.userName = sanitizedName;\n    this.log('User name updated to:', this.userName);\n\n    // Replace asterisks on the page\n    this.replaceAsterisks();\n\n    // Activate the profile card\n    this.activateProfileCard();\n  }\n\n  /**\n   * Sanitize the user name (remove HTML tags, trim, limit length)\n   */\n  private sanitizeName(name: string): string {\n    return name\n      .replace(/[<>]/g, '') // Remove HTML tags\n      .trim()\n      .substring(0, 100); // Limit to 100 characters\n  }\n\n  /**\n   * Replace all asterisks on the page with the user's name\n   */\n  private replaceAsterisks(): void {\n    if (!this.userName) {\n      this.log('No user name available, skipping replacement');\n      return;\n    }\n\n    // Find all elements with the target selector\n    const elements = document.querySelectorAll(this.config.targetSelector);\n\n    if (elements.length === 0) {\n      this.log('No elements found with selector:', this.config.targetSelector);\n      return;\n    }\n\n    this.log(`Found ${elements.length} element(s) to update`);\n\n    elements.forEach((element) => {\n      const currentText = element.textContent || '';\n\n      // Check if the element contains asterisks\n      if (this.config.asteriskPattern.test(currentText)) {\n        // Replace asterisks with the user's name\n        const newText = currentText.replace(this.config.asteriskPattern, this.userName!);\n        element.textContent = newText;\n\n        this.log(`Updated element: \"${currentText}\" -> \"${newText}\"`);\n\n        // Add a class to indicate the element has been updated\n        element.classList.add('name-updated');\n      }\n    });\n  }\n\n  /**\n   * Update the stored user ID and replace asterisks on the page\n   */\n  private updateUserId(id: string): void {\n    // Sanitize the ID\n    const sanitizedId = this.sanitizeName(id);\n\n    if (!sanitizedId) {\n      this.log('Invalid or empty user ID, skipping update');\n      return;\n    }\n\n    this.userId = sanitizedId;\n    this.log('User ID updated to:', this.userId);\n\n    // Replace asterisks on the page\n    this.replaceUserIdAsterisks();\n  }\n\n  /**\n   * Replace all asterisks in user ID elements with the user's ID\n   */\n  private replaceUserIdAsterisks(): void {\n    if (!this.userId) {\n      this.log('No user ID available, skipping replacement');\n      return;\n    }\n\n    // Find all elements with the user ID selector\n    const elements = document.querySelectorAll(this.config.userIdSelector);\n\n    if (elements.length === 0) {\n      this.log('No user ID elements found with selector:', this.config.userIdSelector);\n      return;\n    }\n\n    this.log(`Found ${elements.length} user ID element(s) to update`);\n\n    elements.forEach((element) => {\n      const currentText = element.textContent || '';\n\n      // Check if the element contains asterisks\n      if (this.config.asteriskPattern.test(currentText)) {\n        // Replace asterisks with the user's ID\n        const newText = currentText.replace(this.config.asteriskPattern, this.userId!);\n        element.textContent = newText;\n\n        this.log(`Updated user ID element: \"${currentText}\" -> \"${newText}\"`);\n\n        // Add a class to indicate the element has been updated\n        element.classList.add('user-id-updated');\n      }\n    });\n  }\n\n  /**\n   * Activate the profile card by adding the active class\n   */\n  private activateProfileCard(): void {\n    // Find the profile card element\n    const profileCard = document.querySelector(this.config.profileCardSelector);\n\n    if (!profileCard) {\n      this.log('Profile card not found with selector:', this.config.profileCardSelector);\n      return;\n    }\n\n    // Add the active_fill class to the profile card\n    profileCard.classList.add(this.config.activeClass);\n    this.log(`Profile card activated with class: ${this.config.activeClass}`);\n\n    // Activate additional elements (e.g., .shadow-yellow, .visual-block-card)\n    // Note: These elements use 'active' class, not 'active_fill'\n    this.config.additionalActiveElements.forEach((selector) => {\n      const element = profileCard.querySelector(selector);\n      if (element) {\n        element.classList.add('active'); // Fixed: Use 'active' instead of activeClass\n        this.log(`Additional element activated: ${selector} with class 'active'`);\n      }\n    });\n  }\n\n  /**\n   * Manually set the user name (useful for testing or pre-filling)\n   */\n  public setUserName(name: string): void {\n    this.updateUserName(name);\n  }\n\n  /**\n   * Manually set the user ID (useful for testing or pre-filling)\n   */\n  public setUserId(id: string): void {\n    this.updateUserId(id);\n  }\n\n  /**\n   * Get the current user name\n   */\n  public getUserName(): string | null {\n    return this.userName;\n  }\n\n  /**\n   * Get the current user ID\n   */\n  public getUserId(): string | null {\n    return this.userId;\n  }\n\n  /**\n   * Reset the user name and user ID and restore asterisks\n   */\n  public reset(): void {\n    this.userName = null;\n    this.userId = null;\n    this.log('User name and ID reset');\n\n    // Optionally restore asterisks (if needed)\n    // This would require storing the original text\n  }\n\n  /**\n   * Log messages if debug mode is enabled\n   */\n  private log(...args: unknown[]): void {\n    if (this.config.debug) {\n      console.log('[TypebotNameReplacer]', ...args);\n    }\n  }\n\n  /**\n   * Destroy the name replacer and remove event listeners\n   */\n  public destroy(): void {\n    window.removeEventListener('message', this.handleMessage.bind(this));\n    this.isListening = false;\n    this.log('TypebotNameReplacer destroyed');\n  }\n}\n\n/**\n * Initialize the Typebot name replacer with default configuration\n */\nexport function initTypebotNameReplacer(config: NameReplacerConfig = {}): TypebotNameReplacer {\n  const replacer = new TypebotNameReplacer({\n    ...config,\n    debug: true, // Enable debug logging by default\n  });\n\n  replacer.init();\n\n  return replacer;\n}\n", "import { initCardInfoMapper } from '$utils/card-info-mapper';\nimport { initCardUpdates } from '$utils/card-updater';\nimport { greetUser } from '$utils/greet';\nimport { initLogoCardToggle } from '$utils/logo-card-toggle';\nimport { initProfileCardToggle } from '$utils/profile-card-toggle';\nimport { initTypebotEmailHandler } from '$utils/typebot-email-handler';\nimport { initTypebotNameReplacer } from '$utils/typebot-name-replacer';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  const name = 'John Doe';\n  greetUser(name);\n\n  // Initialize card info mapper and start updates\n  const cardMapper = initCardInfoMapper();\n  initCardUpdates(cardMapper, 3000);\n\n  // Initialize profile card toggle interactions\n  initProfileCardToggle();\n\n  // Initialize Typebot name replacer\n  // This will listen for Typebot events and replace asterisks with the user's name\n  initTypebotNameReplacer({\n    targetSelector: '[card-info=\"name\"]',\n    debug: true, // Enable debug logging in development\n  });\n\n  // Initialize Typebot email handler\n  // This will listen for email completion and trigger card rotation animation\n  initTypebotEmailHandler({\n    profileCardSelector: '.profile-card_wrapper',\n    frontElementsSelector: '.front-elements',\n    rotationElementsSelector: '.rotation-elements',\n    emailSelector: '[card-info=\"email\"]',\n    phoneSelector: '[card-info=\"telefone\"]',\n    activeFillClass: 'active_fill',\n    rotateClass: 'rotate',\n    activeClass: 'active',\n    debug: true, // Enable debug logging in development\n  });\n\n  // Initialize logo card toggle\n  // This will allow users to toggle card rotation by clicking the Reino Capital logo\n  initLogoCardToggle({\n    logoSelector: '.logo_card',\n    debug: true, // Enable debug logging in development\n  });\n});\n"],
  "mappings": "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",
  "names": ["DEFAULT_CONFIG", "DEFAULT_CONFIG", "DEFAULT_CONFIG"]
}

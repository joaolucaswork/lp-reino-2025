"use strict";(()=>{var I=Object.defineProperty;var R=(i,e,t)=>e in i?I(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var r=(i,e,t)=>R(i,typeof e!="symbol"?e+"":e,t);var a={"bg-text-color":'[card-info="bg-text-color"]',name:'[card-info="name"]',title:'[card-info="title"]',elements:'[card-info="elements"]',mini:'[card-info="mini"]',date:'[card-info="date"]',ilustration:'[card-info="ilustration"]'},c=class{constructor(){r(this,"elements");this.elements=this.queryAllElements()}queryAllElements(){return{wrapper:document.querySelector(a["bg-text-color"]),name:document.querySelector(a.name),title:document.querySelector(a.title),elements:document.querySelector(a.elements),mini:document.querySelector(a.mini),date:document.querySelector(a.date),ilustration:document.querySelector(a.ilustration)}}getElement(e){let o={"bg-text-color":"wrapper",name:"name",title:"title",elements:"elements",mini:"mini",date:"date",ilustration:"ilustration"}[e];return this.elements[o]||null}getAllElements(){return this.elements}refresh(){this.elements=this.queryAllElements()}updateCard(e){e.name&&this.elements.name&&(this.elements.name.textContent=e.name),e.title&&this.elements.title&&(this.elements.title.textContent=e.title),e.date&&this.elements.date&&(this.elements.date.textContent=e.date),e.theme&&this.elements.wrapper&&this.elements.wrapper.setAttribute("data-theme",e.theme)}validateElements(){return Object.values(this.elements).every(e=>e!==null)}getMissingElements(){let e=[];return Object.entries(this.elements).forEach(([t,o])=>{o===null&&e.push(t)}),e}},f=()=>new c;var L=i=>{let e=String(i.getDate()).padStart(2,"0"),t=String(i.getMonth()+1).padStart(2,"0"),o=i.getFullYear();return`${e}.${t}.${o}`},h=["Investidor Explorador","Investidor Estrat\xE9gico","Investidor Vision\xE1rio","Investidor Inovador","Investidor Consciente","Investidor Anal\xEDtico","Investidor Empreendedor","Investidor Resiliente"],A=(i,e=3e3)=>{let t=0,o=()=>{t=(t+1)%h.length,i.updateCard({title:h[t]})};return window.setInterval(o,e)},m=(i,e=3e3)=>{let o=L(new Date);return i.updateCard({date:o}),A(i,e)};var d=(i=document)=>{let e="Last Published:";for(let t of i.childNodes)if(t.nodeType===Node.COMMENT_NODE&&t.textContent?.includes(e)){let o=t.textContent.trim().split(e)[1];if(o)return new Date(o)}};var v=i=>{let e=d();console.log(`Hello ${i}!`),console.log(`This site was last published on ${e?.toLocaleDateString("en-US",{year:"numeric",month:"long",day:"2-digit"})}.`)};var w={profileCardSelector:".profile-card_wrapper",frontElementsSelector:".front-elements",rotationElementsSelector:".rotation-elements",activeFillClass:"active_fill",rotateClass:"rotate",activeClass:"active",debug:!1};var s=class{constructor(e={}){r(this,"config");this.config={...w,...e}}getRotationState(){let e=document.querySelector(this.config.profileCardSelector);return e?e.classList.contains(this.config.rotateClass)?"back":"front":(this.log("Profile card not found, assuming FRONT state"),"front")}isRotated(){return this.getRotationState()==="back"}rotateToBack(){this.log("Rotating card to show back face");let e=document.querySelector(this.config.profileCardSelector);if(!e)return this.log("Profile card not found with selector:",this.config.profileCardSelector),!1;e.classList.contains(this.config.activeFillClass)||(e.classList.add(this.config.activeFillClass),this.log(`Added ${this.config.activeFillClass} class to profile card`)),e.classList.add(this.config.rotateClass),this.log(`Added ${this.config.rotateClass} class to profile card`);let t=document.querySelector(this.config.frontElementsSelector),o=document.querySelector(this.config.rotationElementsSelector);return t?(t.classList.remove(this.config.activeClass),this.log(`Removed ${this.config.activeClass} class from front elements`)):this.log("Front elements not found with selector:",this.config.frontElementsSelector),o?(o.classList.add(this.config.activeClass),this.log(`Added ${this.config.activeClass} class to rotation elements`)):this.log("Rotation elements not found with selector:",this.config.rotationElementsSelector),this.log("Card rotation to back completed"),!0}rotateToFront(){this.log("Rotating card to show front face");let e=document.querySelector(this.config.profileCardSelector);if(!e)return this.log("Profile card not found with selector:",this.config.profileCardSelector),!1;e.classList.remove(this.config.rotateClass),this.log(`Removed ${this.config.rotateClass} class from profile card`);let t=document.querySelector(this.config.frontElementsSelector),o=document.querySelector(this.config.rotationElementsSelector);return t?(t.classList.add(this.config.activeClass),this.log(`Added ${this.config.activeClass} class to front elements`)):this.log("Front elements not found with selector:",this.config.frontElementsSelector),o?(o.classList.remove(this.config.activeClass),this.log(`Removed ${this.config.activeClass} class from rotation elements`)):this.log("Rotation elements not found with selector:",this.config.rotationElementsSelector),this.log("Card rotation to front completed"),!0}toggleRotation(){return this.getRotationState()==="front"?(this.rotateToBack(),"back"):(this.rotateToFront(),"front")}log(...e){this.config.debug&&console.log("[CardRotationManager]",...e)}};var N={logoSelector:".logo_card",debug:!1},g=class{constructor(e={}){r(this,"config");r(this,"rotationManager");r(this,"isInitialized",!1);r(this,"boundHandleClick");this.config={...N,...e},this.rotationManager=new s({debug:this.config.debug}),this.boundHandleClick=this.handleLogoClick.bind(this)}init(){if(this.isInitialized){this.log("Logo toggle handler already initialized");return}this.attachEventListeners(),this.isInitialized=!0,this.log("Logo toggle handler initialized")}attachEventListeners(){let e=document.querySelectorAll(this.config.logoSelector);if(e.length===0){this.log("No logo elements found with selector:",this.config.logoSelector);return}this.log(`Found ${e.length} logo element(s) to attach listeners`),e.forEach((t,o)=>{t.addEventListener("click",this.boundHandleClick),t.style.cursor="pointer",this.log(`Attached click listener to logo element ${o+1}`)})}handleLogoClick(e){e.stopPropagation(),e.preventDefault(),this.log("Logo clicked, toggling card rotation");let t=this.rotationManager.toggleRotation();this.log(`Card rotation toggled to: ${t}`),this.dispatchRotationEvent(t)}dispatchRotationEvent(e){let t=new CustomEvent("card-rotation-toggle",{detail:{state:e,isRotated:e==="back"},bubbles:!0});document.dispatchEvent(t),this.log("Dispatched card-rotation-toggle event:",e)}getRotationState(){return this.rotationManager.getRotationState()}isRotated(){return this.rotationManager.isRotated()}rotateToBack(){let e=this.rotationManager.rotateToBack();return e&&this.dispatchRotationEvent("back"),e}rotateToFront(){let e=this.rotationManager.rotateToFront();return e&&this.dispatchRotationEvent("front"),e}toggle(){let e=this.rotationManager.toggleRotation();return this.dispatchRotationEvent(e),e}destroy(){document.querySelectorAll(this.config.logoSelector).forEach((t,o)=>{t.removeEventListener("click",this.boundHandleClick),t.style.cursor="",this.log(`Removed click listener from logo element ${o+1}`)}),this.isInitialized=!1,this.log("Logo toggle handler destroyed")}log(...e){this.config.debug&&console.log("[LogoCardToggle]",...e)}};function C(i={}){let e=new g({...i,debug:i.debug??!0});return e.init(),e}var E=".profile-card_wrapper",b="active_fill",M=[{selector:".visual-block-card",activeClass:"active"},{selector:".shadow-yellow",activeClass:"active"}],x=i=>{document.querySelectorAll(E).forEach(t=>{i?t.classList.add(b):t.classList.remove(b),M.forEach(({selector:o,activeClass:n})=>{let l=t.querySelector(o);l&&(i?l.classList.add(n):l.classList.remove(n))})})},U=i=>{let e=i.currentTarget;e.toggleState=((e.toggleState||0)+1)%2,x(e.toggleState===1)},S=()=>{document.querySelectorAll(E).forEach(e=>{e.toggleState=0,e.addEventListener("click",U)})};var k={profileCardSelector:".profile-card_wrapper",frontElementsSelector:".front-elements",rotationElementsSelector:".rotation-elements",emailSelector:'[card-info="email"]',phoneSelector:'[card-info="telefone"]',activeFillClass:"active_fill",rotateClass:"rotate",activeClass:"active",debug:!1},u=class{constructor(e={}){r(this,"config");r(this,"userEmail",null);r(this,"userPhone",null);r(this,"isListening",!1);r(this,"hasRotated",!1);this.config={...k,...e}}init(){if(this.isListening){this.log("Already listening for Typebot events");return}this.setupMessageListener(),this.isListening=!0,this.log("TypebotEmailHandler initialized and listening for events")}setupMessageListener(){window.addEventListener("message",this.handleMessage.bind(this))}handleMessage(e){try{let{data:t}=e;this.isTypebotVariableUpdate(t)&&this.handleTypebotVariableUpdate(t)}catch(t){console.error("Error handling Typebot message:",t)}}isTypebotVariableUpdate(e){return typeof e=="object"&&e!==null&&"type"in e&&e.type==="typebot-variable-update"&&"variable"in e}handleTypebotVariableUpdate(e){let{variable:t,value:o}=e;!t||!o||(this.log(`Typebot variable "${t}" updated:`,o),t==="email"&&(this.updateUserEmail(o),this.triggerCardRotation()),(t==="telefone"||t==="phone")&&this.updateUserPhone(o))}updateUserEmail(e){let t=this.sanitizeInput(e);if(!t){this.log("Invalid or empty email, skipping update");return}this.userEmail=t,this.log("User email updated to:",this.userEmail),this.updateEmailDisplay()}updateUserPhone(e){let t=this.sanitizeInput(e);if(!t){this.log("Invalid or empty phone, skipping update");return}this.userPhone=t,this.log("User phone updated to:",this.userPhone),this.updatePhoneDisplay()}sanitizeInput(e){return e.replace(/[<>]/g,"").trim().substring(0,200)}updateEmailDisplay(){if(!this.userEmail){this.log("No user email available, skipping display update");return}let e=document.querySelectorAll(this.config.emailSelector);if(e.length===0){this.log("No email elements found with selector:",this.config.emailSelector);return}this.log(`Found ${e.length} email element(s) to update`),e.forEach(t=>{t.textContent=this.userEmail,this.log(`Updated email element to: "${this.userEmail}"`)})}updatePhoneDisplay(){if(!this.userPhone){this.log("No user phone available, skipping display update");return}let e=document.querySelectorAll(this.config.phoneSelector);if(e.length===0){this.log("No phone elements found with selector:",this.config.phoneSelector);return}this.log(`Found ${e.length} phone element(s) to update`),e.forEach(t=>{t.textContent=this.userPhone,this.log(`Updated phone element to: "${this.userPhone}"`)})}triggerCardRotation(){if(this.hasRotated){this.log("Card has already been rotated, skipping");return}this.log("Triggering card rotation animation");let e=document.querySelector(this.config.profileCardSelector);if(!e){this.log("Profile card not found with selector:",this.config.profileCardSelector);return}e.classList.add(this.config.activeFillClass),e.classList.add(this.config.rotateClass),this.log(`Added classes to profile card: ${this.config.activeFillClass}, ${this.config.rotateClass}`);let t=document.querySelector(this.config.frontElementsSelector),o=document.querySelector(this.config.rotationElementsSelector);t?(t.classList.remove(this.config.activeClass),this.log(`Removed ${this.config.activeClass} class from front elements`)):this.log("Front elements not found with selector:",this.config.frontElementsSelector),o?(o.classList.add(this.config.activeClass),this.log(`Added ${this.config.activeClass} class to rotation elements`)):this.log("Rotation elements not found with selector:",this.config.rotationElementsSelector),this.hasRotated=!0,this.log("Card rotation completed")}rotate(){this.hasRotated=!1,this.triggerCardRotation()}getUserEmail(){return this.userEmail}getUserPhone(){return this.userPhone}reset(){this.userEmail=null,this.userPhone=null,this.hasRotated=!1,this.log("Email handler reset")}log(...e){this.config.debug&&console.log("[TypebotEmailHandler]",...e)}destroy(){window.removeEventListener("message",this.handleMessage.bind(this)),this.isListening=!1,this.log("TypebotEmailHandler destroyed")}};function T(i={}){let e=new u({...i,debug:!0});return e.init(),e}var D={targetSelector:'[card-info="name"]',userIdSelector:'[card-info="random-code"]',profileCardSelector:".profile-card_wrapper",activeClass:"active_fill",cardInfoAttribute:"card-info",nameAttributeValue:"name",userIdAttributeValue:"random-code",asteriskPattern:/\*+/g,additionalActiveElements:[".shadow-yellow",".visual-block-card"],debug:!1},p=class{constructor(e={}){r(this,"config");r(this,"userName",null);r(this,"userId",null);r(this,"isListening",!1);this.config={...D,...e}}init(){if(this.isListening){this.log("Already listening for Typebot events");return}this.setupMessageListener(),this.isListening=!0,this.log("TypebotNameReplacer initialized and listening for events")}setupMessageListener(){window.addEventListener("message",this.handleMessage.bind(this))}handleMessage(e){try{let{data:t}=e;this.isTypebotCompletion(t)&&this.handleTypebotCompletion(t),this.isTypebotVariableUpdate(t)&&this.handleTypebotVariableUpdate(t)}catch(t){console.error("Error handling Typebot message:",t)}}isTypebotCompletion(e){return typeof e=="object"&&e!==null&&"type"in e&&e.type==="typebot-completion"}isTypebotVariableUpdate(e){return typeof e=="object"&&e!==null&&"type"in e&&e.type==="typebot-variable-update"&&"variable"in e&&e.variable==="nome"}handleTypebotCompletion(e){if(e.data&&e.data.nome){let{nome:t}=e.data;this.log("Typebot completed with nome:",t),this.updateUserName(t)}if(e.data&&e.data.userId){let{userId:t}=e.data;this.log("Typebot completed with userId:",t),this.updateUserId(t)}}handleTypebotVariableUpdate(e){e.value&&(this.log('Typebot variable "nome" updated:',e.value),this.updateUserName(e.value)),e.variableId&&(this.log("Typebot variable ID captured:",e.variableId),this.updateUserId(e.variableId))}updateUserName(e){let t=this.sanitizeName(e);if(!t){this.log("Invalid or empty name, skipping update");return}this.userName=t,this.log("User name updated to:",this.userName),this.replaceAsterisks(),this.activateProfileCard()}sanitizeName(e){return e.replace(/[<>]/g,"").trim().substring(0,100)}replaceAsterisks(){if(!this.userName){this.log("No user name available, skipping replacement");return}let e=document.querySelectorAll(this.config.targetSelector);if(e.length===0){this.log("No elements found with selector:",this.config.targetSelector);return}this.log(`Found ${e.length} element(s) to update`),e.forEach(t=>{let o=t.textContent||"";if(this.config.asteriskPattern.test(o)){let n=o.replace(this.config.asteriskPattern,this.userName);t.textContent=n,this.log(`Updated element: "${o}" -> "${n}"`),t.classList.add("name-updated")}})}updateUserId(e){let t=this.sanitizeName(e);if(!t){this.log("Invalid or empty user ID, skipping update");return}this.userId=t,this.log("User ID updated to:",this.userId),this.replaceUserIdAsterisks()}replaceUserIdAsterisks(){if(!this.userId){this.log("No user ID available, skipping replacement");return}let e=document.querySelectorAll(this.config.userIdSelector);if(e.length===0){this.log("No user ID elements found with selector:",this.config.userIdSelector);return}this.log(`Found ${e.length} user ID element(s) to update`),e.forEach(t=>{let o=t.textContent||"";if(this.config.asteriskPattern.test(o)){let n=o.replace(this.config.asteriskPattern,this.userId);t.textContent=n,this.log(`Updated user ID element: "${o}" -> "${n}"`),t.classList.add("user-id-updated")}})}activateProfileCard(){let e=document.querySelector(this.config.profileCardSelector);if(!e){this.log("Profile card not found with selector:",this.config.profileCardSelector);return}e.classList.add(this.config.activeClass),this.log(`Profile card activated with class: ${this.config.activeClass}`),this.config.additionalActiveElements.forEach(t=>{let o=e.querySelector(t);o&&(o.classList.add("active"),this.log(`Additional element activated: ${t} with class 'active'`))})}setUserName(e){this.updateUserName(e)}setUserId(e){this.updateUserId(e)}getUserName(){return this.userName}getUserId(){return this.userId}reset(){this.userName=null,this.userId=null,this.log("User name and ID reset")}log(...e){this.config.debug&&console.log("[TypebotNameReplacer]",...e)}destroy(){window.removeEventListener("message",this.handleMessage.bind(this)),this.isListening=!1,this.log("TypebotNameReplacer destroyed")}};function y(i={}){let e=new p({...i,debug:!0});return e.init(),e}window.Webflow||(window.Webflow=[]);window.Webflow.push(()=>{v("John Doe");let e=f();m(e,3e3),S(),y({targetSelector:'[card-info="name"]',debug:!0}),T({profileCardSelector:".profile-card_wrapper",frontElementsSelector:".front-elements",rotationElementsSelector:".rotation-elements",emailSelector:'[card-info="email"]',phoneSelector:'[card-info="telefone"]',activeFillClass:"active_fill",rotateClass:"rotate",activeClass:"active",debug:!0}),C({logoSelector:".logo_card",debug:!0})});})();
